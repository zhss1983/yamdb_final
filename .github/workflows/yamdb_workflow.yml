name: API YaMDB workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r requirements.txt

    - name: Test with flake8
      run: |
        python -m flake8

    - name: Test with pytests
      run: |
        python -m pytest

  build:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/api_yambd:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/api_yamdb
            sudo docker-compose stop
            sudo docker-compose rm web
            touch ./.env_db
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> ./.env_db
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env_db
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> ./.env_db
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> ./.env_db
            echo DB_HOST=${{ secrets.DB_HOST }} >> ./.env_db
            echo DB_PORT=${{ secrets.DB_PORT }} >> ./.env_db
            touch ./.env_web
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> ./.env_web
            echo SENTRY_DSN=${{ secrets.SENTRY_DSN }} >> ./.env_web
            echo EMAIL_YAMDB=${{ secrets.EMAIL_YAMDB }} >> ./.env_web
            touch ./.env_mail
            echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> ./.env_mail
            echo EMAIL_PORT=${{ secrets.EMAIL_PORT }} >> ./.env_mail
            echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> ./.env_mail
            echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> ./.env_mail
            echo EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }} >> ./.env_mail
            sudo docker-compose up -d

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!